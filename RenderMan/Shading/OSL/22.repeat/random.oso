OpenShadingLanguage 1.00
# Compiled by oslc 1.6.2dev
shader random
param	color	Cin	1 1 1		%read{28,28} %write{2147483647,-1}
oparam	color	Cout	0 0 0		%read{2147483647,-1} %write{28,28}
global	float	u	%read{2,21} %write{2147483647,-1}
global	float	v	%read{8,22} %write{2147483647,-1}
local	float	fuzz	%read{24,25} %write{0,0}
local	float	repeatCount	%read{2,22} %write{1,1}
local	float	s	%read{15,15} %write{7,7}
local	float	t	%read{15,15} %write{13,13}
local	point	centre	%read{16,16} %write{14,14}
local	point	here	%read{16,16} %write{15,15}
local	float	dist	%read{26,26} %write{16,16}
local	float	radius	%read{24,25} %write{20,20}
local	color	myColor	%read{28,28} %write{23,23}
local	float	inDisk	%read{28,28} %write{27,27}
const	float	$const1	0.025		%read{0,0} %write{2147483647,-1}
const	int	$const2	5		%read{1,1} %write{2147483647,-1}
temp	float	$tmp1	%read{4,7} %write{2,2}
const	float	$const4	1		%read{4,27} %write{2147483647,-1}
const	string	$const5	"mod"		%read{3,9} %write{2147483647,-1}
temp	float	$tmp2	%read{6,6} %write{5,5}
temp	float	$tmp3	%read{5,5} %write{4,4}
temp	float	$tmp4	%read{7,7} %write{6,6}
temp	float	$tmp5	%read{10,13} %write{8,8}
temp	float	$tmp6	%read{12,12} %write{11,11}
temp	float	$tmp7	%read{11,11} %write{10,10}
temp	float	$tmp8	%read{13,13} %write{12,12}
const	point	$const6	0.5 0.5 0		%read{14,14} %write{2147483647,-1}
const	float	$const8	0		%read{15,15} %write{2147483647,-1}
temp	float	$tmp9	%read{20,20} %write{19,19}
const	string	$const9	"cell"		%read{19,23} %write{2147483647,-1}
temp	float	$tmp10	%read{19,19} %write{17,17}
temp	float	$tmp11	%read{19,19} %write{18,18}
const	float	$const10	0.40000001		%read{20,20} %write{2147483647,-1}
temp	float	$tmp12	%read{23,23} %write{21,21}
temp	float	$tmp13	%read{23,23} %write{22,22}
temp	float	$tmp14	%read{27,27} %write{26,26}
temp	float	$tmp15	%read{26,26} %write{24,24}
temp	float	$tmp16	%read{26,26} %write{25,25}
code ___main___
# random.osl:6
#     float fuzz=0.025;
	assign		fuzz $const1 	%filename{"random.osl"} %line{6} %argrw{"wr"}
# random.osl:7
#     float repeatCount=5;
	assign		repeatCount $const2 	%line{7} %argrw{"wr"}
# random.osl:8
#     float s=mod(repeatCount*u,1);
	mul		$tmp1 repeatCount u 	%line{8} %argrw{"wrr"}
	functioncall	$const5 8 	%argrw{"r"}
# /Applications/Pixar/RenderManProServer-20.4/lib/osl/include/stdosl.h:135
# point  mod (point  a, point  b) { return a - b*floor(a/b); }
	div		$tmp3 $tmp1 $const4 	%filename{"/Applications/Pixar/RenderManProServer-20.4/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp2 $tmp3 	%argrw{"wr"}
	mul		$tmp4 $const4 $tmp2 	%argrw{"wrr"}
	sub		s $tmp1 $tmp4 	%argrw{"wrr"}
# random.osl:9
#     float t=mod(repeatCount*v,1);
	mul		$tmp5 repeatCount v 	%filename{"random.osl"} %line{9} %argrw{"wrr"}
	functioncall	$const5 14 	%argrw{"r"}
# /Applications/Pixar/RenderManProServer-20.4/lib/osl/include/stdosl.h:135
# int    mod (int    a, int    b) { return a - b*(int)floor(a/b); }
	div		$tmp7 $tmp5 $const4 	%filename{"/Applications/Pixar/RenderManProServer-20.4/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp6 $tmp7 	%argrw{"wr"}
	mul		$tmp8 $const4 $tmp6 	%argrw{"wrr"}
	sub		t $tmp5 $tmp8 	%argrw{"wrr"}
# random.osl:10
#     point centre=point (0.5,0.5,0);
	assign		centre $const6 	%filename{"random.osl"} %line{10} %argrw{"wr"}
# random.osl:11
#     point here=point (s,t,0);
	point		here s t $const8 	%line{11} %argrw{"wrrr"}
# random.osl:12
#     float dist=distance(centre,here);
	distance	dist centre here 	%line{12} %argrw{"wrr"}
# random.osl:13
#     float radius=(float) noise("cell",repeatCount*u,repeatCount*v)*0.4;
	mul		$tmp10 repeatCount u 	%line{13} %argrw{"wrr"}
	mul		$tmp11 repeatCount v 	%argrw{"wrr"}
	noise		$tmp9 $const9 $tmp10 $tmp11 	%argrw{"wrrr"}
	mul		radius $tmp9 $const10 	%argrw{"wrr"}
# random.osl:14
#     color myColor=(color) noise("cell",repeatCount*u,repeatCount*v);
	mul		$tmp12 repeatCount u 	%line{14} %argrw{"wrr"}
	mul		$tmp13 repeatCount v 	%argrw{"wrr"}
	noise		myColor $const9 $tmp12 $tmp13 	%argrw{"wrrr"}
# random.osl:15
#     float inDisk=1-smoothstep(radius-fuzz,radius+fuzz,dist);
	sub		$tmp15 radius fuzz 	%line{15} %argrw{"wrr"}
	add		$tmp16 radius fuzz 	%argrw{"wrr"}
	smoothstep	$tmp14 $tmp15 $tmp16 dist 	%argrw{"wrrr"}
	sub		inDisk $const4 $tmp14 	%argrw{"wrr"}
# random.osl:17
#     Cout=mix(Cin,myColor,inDisk);
	mix		Cout Cin myColor inDisk 	%line{17} %argrw{"wrrr"}
	end
