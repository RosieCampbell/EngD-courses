OpenShadingLanguage 1.00
# Compiled by oslc 1.6.2dev
surface integrate
param	color	Cin	1 1 1		%read{2147483647,-1} %write{2147483647,-1}
oparam	color	Cout	1 1 1		%read{2147483647,-1} %write{17,17}
global	float	u	%read{5,7} %write{2147483647,-1} %derivs
global	float	v	%read{0,0} %write{2147483647,-1} %derivs
local	float	filterWidth	%read{10,14} %write{6,6}
local	float	val	%read{15,15} %write{9,14}
local	float	scale	%read{5,5} %write{4,4} %derivs
local	float	ss	%read{6,12} %write{5,5} %derivs
temp	float	$tmp1	%read{4,4} %write{3,3} %derivs
const	float	$const2	10		%read{3,3} %write{2147483647,-1}
temp	float	$tmp2	%read{2,2} %write{1,1} %derivs
temp	float	$tmp3	%read{1,1} %write{0,0} %derivs
const	float	$const4	4		%read{0,0} %write{2147483647,-1}
temp	float	$tmp4	%read{3,3} %write{2,2} %derivs
const	float	$const6	1		%read{2,2} %write{2147483647,-1}
const	float	$const8	2		%read{4,4} %write{2147483647,-1}
const	float	$const9	0.5		%read{7,16} %write{2147483647,-1}
temp	int	$tmp5	%read{8,8} %write{7,7}
temp	float	$tmp6	%read{13,13} %write{11,11}
temp	float	$tmp7	%read{11,11} %write{10,10}
temp	float	$tmp8	%read{13,13} %write{12,12}
temp	float	$tmp9	%read{14,14} %write{13,13}
temp	float	$tmp10	%read{16,16} %write{15,15}
temp	float	$tmp11	%read{17,17} %write{16,16}
code ___main___
# integrate.osl:10
#     float scale=pow(10,floor(v*4)+1)*2;
	mul		$tmp3 v $const4 	%filename{"integrate.osl"} %line{10} %argrw{"wrr"}
	floor		$tmp2 $tmp3 	%argrw{"wr"}
	add		$tmp4 $tmp2 $const6 	%argrw{"wrr"}
	pow		$tmp1 $const2 $tmp4 	%argrw{"wrr"}
	mul		scale $tmp1 $const8 	%argrw{"wrr"}
# integrate.osl:11
#     float ss=u*scale;
	mul		ss u scale 	%line{11} %argrw{"wrr"}
# integrate.osl:12
#     filterWidth=filterwidth(ss);
	filterwidth	filterWidth ss 	%line{12} %argrw{"wr"} %argderivs{1}
# integrate.osl:14
#     if(u>0.5)
	gt		$tmp5 u $const9 	%line{14} %argrw{"wrr"}
	if		$tmp5 10 15 	%argrw{"r"}
# integrate.osl:16
# 		val=cos(ss);
	cos		val ss 	%line{16} %argrw{"wr"}
# integrate.osl:20
# 		val=(sin(ss+filterWidth)-sin(ss))
	add		$tmp7 ss filterWidth 	%line{20} %argrw{"wrr"}
	sin		$tmp6 $tmp7 	%argrw{"wr"}
	sin		$tmp8 ss 	%argrw{"wr"}
	sub		$tmp9 $tmp6 $tmp8 	%argrw{"wrr"}
# integrate.osl:21
# 			/filterWidth;
	div		val $tmp9 filterWidth 	%line{21} %argrw{"wrr"}
# integrate.osl:24
#     Cout=val*0.5+0.5;
	mul		$tmp10 val $const9 	%line{24} %argrw{"wrr"}
	add		$tmp11 $tmp10 $const9 	%argrw{"wrr"}
	assign		Cout $tmp11 	%argrw{"wr"}
	end
