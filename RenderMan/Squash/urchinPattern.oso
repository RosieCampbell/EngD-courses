OpenShadingLanguage 1.00
# Compiled by oslc 1.6.2dev
surface urchinPattern
param	color	Cin	1 1 1		%read{15,19} %write{2147483647,-1}
oparam	color	Cout	0 0 0		%read{28,28} %write{15,28}
oparam	float	a	1		%read{15,15} %write{14,14}
oparam	float	b	0		%read{2147483647,-1} %write{26,26}
global	point	P	%read{23,23} %write{2147483647,-1}
global	float	u	%read{1,10} %write{2147483647,-1}
global	float	v	%read{11,27} %write{2147483647,-1}
local	color	green	%read{28,28} %write{0,0}
local	float	___318_mag	%read{25,25} %write{24,24}
const	color	$const1	0 0.40000001 0		%read{0,0} %write{2147483647,-1}
temp	float	$tmp1	%read{9,9} %write{5,5}
const	float	$const2	0.1		%read{4,4} %write{2147483647,-1}
temp	float	$tmp2	%read{4,4} %write{3,3}
temp	float	$tmp3	%read{2,2} %write{1,1}
const	float	$const4	10		%read{1,6} %write{2147483647,-1}
const	float	$const5	3.1415927		%read{2,2} %write{2147483647,-1}
temp	float	$tmp4	%read{3,3} %write{2,2}
temp	float	$tmp5	%read{5,5} %write{4,4}
const	float	$const6	0.2		%read{8,27} %write{2147483647,-1}
temp	float	$tmp6	%read{8,8} %write{7,7}
temp	float	$tmp7	%read{7,7} %write{6,6}
temp	float	$tmp8	%read{9,9} %write{8,8}
temp	float	$tmp9	%read{14,14} %write{9,9}
const	float	$const7	0.029999999		%read{13,13} %write{2147483647,-1}
temp	float	$tmp10	%read{13,13} %write{12,12}
const	string	$const8	"usimplex"		%read{12,12} %write{2147483647,-1}
temp	float	$tmp11	%read{12,12} %write{10,10}
const	float	$const10	40		%read{10,10} %write{2147483647,-1}
temp	float	$tmp12	%read{12,12} %write{11,11}
const	float	$const12	7		%read{11,11} %write{2147483647,-1}
temp	float	$tmp13	%read{14,14} %write{13,13}
const	float	$const13	0.059999999		%read{16,16} %write{2147483647,-1}
temp	int	$tmp14	%read{17,17} %write{16,16}
const	color	$const14	0.1 0.050000001 0.050000001		%read{18,18} %write{2147483647,-1}
temp	color	$tmp15	%read{20,20} %write{19,19}
const	float	$const16	2		%read{20,20} %write{2147483647,-1}
const	float	$const17	0.07		%read{21,21} %write{2147483647,-1}
temp	int	$tmp16	%read{22,22} %write{21,21}
temp	point	$tmp17	%read{24,24} %write{23,23}
const	float	$const19	200		%read{23,23} %write{2147483647,-1}
temp	float	$tmp18	%read{26,26} %write{25,25}
const	float	$const20	0.60000002		%read{25,25} %write{2147483647,-1}
const	float	$const22	1		%read{25,25} %write{2147483647,-1}
const	float	$const23	0.40000001		%read{26,26} %write{2147483647,-1}
temp	float	$tmp19	%read{28,28} %write{27,27}
code ___main___
# urchinPattern.osl:6
# 		color green = color(0,0.4,0);
	assign		green $const1 	%filename{"urchinPattern.osl"} %line{6} %argrw{"wr"}
# urchinPattern.osl:7
# 		a = (abs(0.1*sin(10*u*M_PI)))+0.2*noise(u*10)+0.03*noise("usimplex",u*40, v*7);
	mul		$tmp3 $const4 u 	%line{7} %argrw{"wrr"}
	mul		$tmp4 $tmp3 $const5 	%argrw{"wrr"}
	sin		$tmp2 $tmp4 	%argrw{"wr"}
	mul		$tmp5 $const2 $tmp2 	%argrw{"wrr"}
	abs		$tmp1 $tmp5 	%argrw{"wr"}
	mul		$tmp7 u $const4 	%argrw{"wrr"}
	noise		$tmp6 $tmp7 	%argrw{"wr"}
	mul		$tmp8 $const6 $tmp6 	%argrw{"wrr"}
	add		$tmp9 $tmp1 $tmp8 	%argrw{"wrr"}
	mul		$tmp11 u $const10 	%argrw{"wrr"}
	mul		$tmp12 v $const12 	%argrw{"wrr"}
	noise		$tmp10 $const8 $tmp11 $tmp12 	%argrw{"wrrr"}
	mul		$tmp13 $const7 $tmp10 	%argrw{"wrr"}
	add		a $tmp9 $tmp13 	%argrw{"wrr"}
# urchinPattern.osl:8
# 		Cout = Cin*a;
	mul		Cout Cin a 	%line{8} %argrw{"wrr"}
# urchinPattern.osl:9
# 		if(v < .06){
	lt		$tmp14 v $const13 	%line{9} %argrw{"wrr"}
	if		$tmp14 21 29 	%argrw{"r"}
# urchinPattern.osl:10
# 			Cout = color(0.1,0.05,0.05);
	assign		Cout $const14 	%line{10} %argrw{"wr"}
# urchinPattern.osl:11
# 			Cout = Cin * v*2;
	mul		$tmp15 Cin v 	%line{11} %argrw{"wrr"}
	mul		Cout $tmp15 $const16 	%argrw{"wrr"}
# urchinPattern.osl:13
# 		else if( v > 0.07){
	gt		$tmp16 v $const17 	%line{13} %argrw{"wrr"}
	if		$tmp16 29 29 	%argrw{"r"}
# urchinPattern.osl:14
# 	    float mag=noise(P*200);
	mul		$tmp17 P $const19 	%line{14} %argrw{"wrr"}
	noise		___318_mag $tmp17 	%argrw{"wr"}
# urchinPattern.osl:15
# 	    b=smoothstep(0.6,1,mag)*0.4;
	smoothstep	$tmp18 $const20 $const22 ___318_mag 	%line{15} %argrw{"wrrr"}
	mul		b $tmp18 $const23 	%argrw{"wrr"}
# urchinPattern.osl:16
# 			Cout = mix(Cout, green, 0.2*v);
	mul		$tmp19 $const6 v 	%line{16} %argrw{"wrr"}
	mix		Cout Cout green $tmp19 	%argrw{"wrrr"}
	end
